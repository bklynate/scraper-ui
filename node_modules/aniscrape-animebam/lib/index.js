// Generated by CoffeeScript 1.10.0
(function() {
  var Promise, _, cheerio, needle;

  Promise = require('bluebird');

  needle = Promise.promisifyAll(require('needle'));

  cheerio = require('cheerio');

  _ = require('lodash');

  needle.defaults({
    follow_max: 5
  });

  module.exports = {
    name: 'animebam',
    http_options: {
      follow_max: 5
    },
    initialize: function() {
      return console.log("[" + this.name + "] loaded successfully.");
    },
    search: {
      page: {
        url: 'http://animebam.net/search',
        param: 'search'
      },
      list: '.mse',
      list: function($, body) {
        return $('.mse');
      },
      row: {
        name: function(el) {
          return el.find("h2").text();
        },
        url: function(el) {
          return "http://animebam.net" + el.attr('href');
        }
      }
    },
    series: {
      list: '.newmanga li',
      row: {
        name: function(el) {
          return el.find(".anititle").text();
        },
        url: function(el) {
          return "http://animebam.net" + el.find("a").attr("href");
        }
      }
    },
    episode: function($, body) {
      var videoFrames;
      videoFrames = $('.tab-pane iframe').get().map(function(item) {
        item = $(item);
        return {
          type: item.parent().attr('id'),
          frameUrl: 'http://animebam.net' + item.attr('src')
        };
      });
      return Promise.map(videoFrames, (function(_this) {
        return function(frame) {
          return needle.getAsync(frame.frameUrl).then(function(resp) {
            var options, sources;
            $ = cheerio.load(resp.body);
            sources = eval($("script:contains('videoSources')").html().match(/\[.+\]/)[0]);
            options = {
              follow_max: 0,
              headers: {
                'Referer': 'http://animebam.net/'
              }
            };
            return Promise.map(sources, function(video) {
              return needle.headAsync(video.file, options).then(function(resp) {
                return {
                  label: frame.type + '-' + video.label,
                  url: resp.headers.location
                };
              });
            });
          });
        };
      })(this)).then(_.flatten);
    }
  };

}).call(this);
