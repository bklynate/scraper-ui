// Generated by CoffeeScript 1.10.0
(function() {
  var Bottleneck, Episode, Errors, Promise, Scraper, SearchResult, Validation, _, cheerio, needle;

  Promise = require('bluebird');

  needle = Promise.promisifyAll(require('needle'));

  cheerio = require('cheerio');

  _ = require('lodash');

  Bottleneck = require('bottleneck');

  Errors = require('./errors');

  Validation = require('./provider/validation');

  needle.defaults({
    follow_max: 10
  });

  SearchResult = (function() {
    function SearchResult(object) {
      var ref, ref1;
      this.seriesName = object.seriesName, this.seriesUrl = object.seriesUrl, this.searchProvider = object.searchProvider, this.episodes = (ref = object.episodes) != null ? ref : [], this.isSpecial = (ref1 = object.isSpecial) != null ? ref1 : false;
    }

    return SearchResult;

  })();

  Episode = (function() {
    function Episode(object) {
      this.number = object.number, this.title = object.title, this.url = object.url, this.searchProvider = object.searchProvider;
    }

    return Episode;

  })();

  Scraper = (function() {
    function Scraper() {
      this.providers = {};
      this.limiter = new Bottleneck(0, 500);
    }

    Scraper.prototype.use = function(provider) {
      return new Promise((function(_this) {
        return function(resolve, reject) {
          var error, error1;
          try {
            if (Validation.Logic.ValidateProvider(provider)) {
              _this.providers[provider.name] = provider;
              return resolve(provider.initialize());
            }
          } catch (error1) {
            error = error1;
            return reject(error);
          }
        };
      })(this));
    };

    Scraper.prototype.search = function(name, provider) {
      return this.fetchSearchResult(name, this.providers[provider]);
    };

    Scraper.prototype.searchAll = function(name) {
      return Promise.map(Object.keys(this.providers), (function(_this) {
        return function(provider) {
          return _this.fetchSearchResult(name, _this.providers[provider]);
        };
      })(this));
    };

    Scraper.prototype.fetchSearchResult = function(query, provider) {
      return this.limiter.schedule(provider._methods.search, query).then(function(body) {
        var $, list;
        $ = cheerio.load(body);
        list = provider._methods.list($, body);
        list = list.map(function(i, el) {
          return new SearchResult({
            seriesName: provider.search.row.name($(el)),
            seriesUrl: provider.search.row.url($(el)),
            searchProvider: provider.name
          });
        }).get();
        return list = _.filter(list, function(item) {
          return item.seriesName.toUpperCase().indexOf(query.toUpperCase()) > -1;
        });
      });
    };

    Scraper.prototype.fetchSeries = function(searchResult) {
      return needle.getAsync(searchResult.seriesUrl).then((function(_this) {
        return function(resp) {
          var $, episodes, provider;
          $ = cheerio.load(resp.body);
          provider = _this.providers[searchResult.searchProvider];
          episodes = $(provider.series.list);
          episodes = episodes.map(function(i, el) {
            var number;
            if (provider.series.row.number == null) {
              number = i + 1;
            } else {
              number = provider.series.row.number($(el));
            }
            return new Episode({
              title: provider.series.row.name($(el)),
              url: provider.series.row.url($(el)),
              number: number,
              searchProvider: provider.name
            });
          }).get();
          searchResult.episodes = episodes;
          return searchResult;
        };
      })(this));
    };

    Scraper.prototype.fetchVideo = function(episode) {
      return needle.getAsync(episode.url).then((function(_this) {
        return function(resp) {
          var $;
          $ = cheerio.load(resp.body);
          return _this.providers[episode.searchProvider].episode($, resp.body);
        };
      })(this));
    };

    return Scraper;

  })();

  module.exports = Scraper;

}).call(this);
